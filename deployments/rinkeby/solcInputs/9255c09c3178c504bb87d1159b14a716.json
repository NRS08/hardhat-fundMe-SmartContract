{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    address public immutable owner;\n    AggregatorV3Interface public priceFeed;\n\n    using PriceConverter for uint256;\n    uint256 constant minUSD = 50 * 1e18;\n    address[] public funders;\n    mapping(address => uint256) public addressToAmtFunded;\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= minUSD,\n            \"Not enough amount\"\n        );\n        funders.push(msg.sender);\n        addressToAmtFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // for (uint256 i = 0; i < funders.length; i++) {\n        //     addressToAmtFunded[funders[i]] = 0;\n        // }\n        address[] memory m_funders = funders;\n        for (uint256 i = 0; i < m_funders.length; i++) {\n            address funder = m_funders[i];\n            addressToAmtFunded[funder] = 0;\n        }\n        funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        // );\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    // function getVersion() public view returns (uint256) {\r\n    //     AggregatorV3Interface v = AggregatorV3Interface(\r\n    //         0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n    //     );\r\n    //     return v.version();\r\n    // }\r\n\r\n    function getConversionRate(uint256 ethAmt, AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmtInUSD = (ethPrice * ethAmt) / 1e18;\r\n        return ethAmtInUSD;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}